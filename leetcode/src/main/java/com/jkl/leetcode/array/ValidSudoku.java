package com.jkl.leetcode.array;

import java.util.HashSet;

/**
 * 《数组题：有效的数独》
 * 判断一个 9x9 的数独是否有效。只需要根据以下规则，验证已经填入的数字是否有效即可。
 * 数字 1-9 在每一行只能出现一次。
 * 数字 1-9 在每一列只能出现一次。
 * 数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。
 * 上图是一个部分填充的有效的数独。
 * 数独部分空格内已填入了数字，空白格用 '.' 表示。
 * 示例 1:
 * 输入:
 * [
 * ["5","3",".",".","7",".",".",".","."],
 * ["6",".",".","1","9","5",".",".","."],
 * [".","9","8",".",".",".",".","6","."],
 * ["8",".",".",".","6",".",".",".","3"],
 * ["4",".",".","8",".","3",".",".","1"],
 * ["7",".",".",".","2",".",".",".","6"],
 * [".","6",".",".",".",".","2","8","."],
 * [".",".",".","4","1","9",".",".","5"],
 * [".",".",".",".","8",".",".","7","9"]
 * ]
 * 输出: true
 * 示例 2:
 * 输入:
 * [
 * ["8","3",".",".","7",".",".",".","."],
 * ["6",".",".","1","9","5",".",".","."],
 * [".","9","8",".",".",".",".","6","."],
 * ["8",".",".",".","6",".",".",".","3"],
 * ["4",".",".","8",".","3",".",".","1"],
 * ["7",".",".",".","2",".",".",".","6"],
 * [".","6",".",".",".",".","2","8","."],
 * [".",".",".","4","1","9",".",".","5"],
 * [".",".",".",".","8",".",".","7","9"]
 * ]
 * 输出: false
 * 解释: 除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。
 * 但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。
 * 说明:
 * 一个有效的数独（部分已被填充）不一定是可解的。
 * 只需要根据以上规则，验证已经填入的数字是否有效即可。
 * 给定数独序列只包含数字 1-9 和字符 '.' 。
 * 给定数独永远是 9x9 形式的。
 *
 * @author jack,  Date on 2019/7/29.
 */
public class ValidSudoku {

    public static void main(String[] args) {
        char[][] matrix = {
                {'5', '3', '.', '.', '7', '.', '.', '.', '.'},
                {'6', '.', '.', '1', '9', '5', '.', '.', '.'},
                {'.', '9', '8', '.', '.', '.', '.', '6', '.'},
                {'8', '.', '.', '.', '6', '.', '.', '.', '3'},
                {'4', '.', '.', '8', '.', '3', '.', '.', '1'},
                {'7', '.', '.', '.', '2', '.', '.', '.', '6'},
                {'.', '6', '.', '.', '.', '.', '2', '8', '.'},
                {'.', '.', '.', '4', '1', '9', '.', '.', '5'},
                {'.', '.', '.', '.', '8', '.', '.', '.', '9'},
        };


        int[][] matrix1 = {
                {1, 2, 3},
                {4, 5, 6},
                {7, 8, 9},
        };

        System.out.println(isValidSudoku(matrix));
    }

    /**
     * 思路: 考察HashSet的用法，HashSet不能存放相同的数据；
     */
    private static boolean isValidSudoku(char[][] board) {

        for (int i = 0; i < 9; i++) {
            HashSet<Character> hashSetLine = new HashSet<>();
            HashSet<Character> hashSetRow = new HashSet<>();
            HashSet<Character> hashSetCube = new HashSet<>();
            for (int j = 0; j < 9; j++) {
                //比较每一行
                if ('.' != board[i][j] && !hashSetLine.add(board[i][j])) {
                    return false;
                }
                //比较每一列
                if ('.' != board[j][i] && !hashSetRow.add(board[j][i])) {
                    return false;
                }

                //比较每一个3x3的9宫格
                int m = i / 3 * 3 + j / 3;
                int n = i % 3 * 3 + j % 3;
                if ('.' != board[m][n] && !hashSetCube.add(board[m][n])) {
                    return false;
                }
            }
        }
        return true;
    }

    /**
     * 思路: 这个方法是在leetcode上看到用时最短的方法
     */
    private static boolean isValidSudoku1(char[][] board) {
        int[] rows = new int[9];
        int[] cols = new int[9];
        int[] blks = new int[9];
        for (int i = 0; i < 9; ++i) {
            for (int j = 0; j < 9; ++j) {
                if (board[i][j] != '.') {
                    int bi = i / 3 * 3 + j / 3;
                    int uvb = 1 << (board[i][j] - '0');
                    if ((uvb & (rows[i] | cols[j] | blks[bi])) != 0) {
                        return false;
                    }
                    rows[i] |= uvb;
                    cols[j] |= uvb;
                    blks[bi] |= uvb;
                }
            }
        }
        return true;
    }
}
